name: Create QR Code Workflow for PR

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: true
        type: string

  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
      actions: write
    steps:
      - name: Get PR Number
        id: pr
        run: |
          if [ ! -z "${{ github.event.pull_request.number }}" ]; then
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          else
            echo "PR_NUMBER=${{ inputs.pr_number }}" >> $GITHUB_ENV
          fi

      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ env.PR_NUMBER }}/head
          fetch-depth: 0

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: |
          npm ci
          npm install -g @expo/ngrok@^4.1.0

      - name: Start Expo server
        run: |
          nohup npx expo start --no-dev --clear --tunnel 2>&1 | tee expo.log &
          sleep 20
        env:
          EXPO_DEBUG: true

      - name: Extract and Display Expo URL
        run: |
          expo_url=$(grep -oP '(?<=URL: ).*' expo.log | tail -n 1)
          if [ -z "$expo_url" ]; then
            echo "Failed to extract Expo URL"
            exit 1
          fi
          echo "EXPO_URL=$expo_url" >> $GITHUB_ENV

      - name: Generate QR Code
        run: |
          sudo apt-get update && sudo apt-get install -y qrencode
          qrencode -s 10 -o "qr_code_pr${{ env.PR_NUMBER }}.png" "${{ env.EXPO_URL }}"


      - name: Create and Start HTTP Server
        run: |
          mkdir -p public
          cp qr_code_pr${{ env.PR_NUMBER }}.png public/
          cd public
          nohup ngrok http 8000 > ../ngrok.log 2>&1 &
          sleep 5
          
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | grep -o '"public_url":"[^"]*' | grep -o 'http[^"]*' | head -1)
          echo "QR_URL=$NGROK_URL/qr_code_pr${{ github.event.pull_request.number }}.png" >> $GITHUB_ENV

      - name: Update PR description with QR Code link
        run: |
          # Function to create the QR section message
          create_message() {
            local time_info="$1"
            echo "
            | üì± Application Preview | Details |
            |----------------------|---------|
            | üì∑ QR Code | <img src=\"${{ env.QR_URL }}\" width=\"300\" /> |
            | üîó Expo Link | ${{ env.EXPO_URL }} |
            | ‚ÑπÔ∏è Instructions | 1. Scan the QR code with your camera app<br>2. Open the link in Expo Go<br>3. Test the application |
            | ‚è±Ô∏è Link validity | $time_info |
      
            > Note: Make sure you have [Expo Go](https://expo.dev/client) installed on your device."
          }

          # Function to update PR description
          update_pr_description() {
            local message="$1"
            local current_description=$(gh pr view ${{ env.PR_NUMBER }} --json body -q '.body')
            local new_description

            if echo "$current_description" | grep -q "Application Preview"; then
              new_description=$(echo "$current_description" | awk '/\*\*Derni√®re mise √† jour automatique :\*\*/{p=NR} p&&/installed on your device\./{p=0} !p{print}')
            else
              new_description="$current_description"
            fi

            new_description="${new_description}

          **Derni√®re mise √† jour automatique :**
          ${message}"

            gh api --method PATCH repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }} --field body="$new_description"
          }

          # Initial update
          initial_message=$(create_message "~4 hour")
          update_pr_description "$initial_message"

          # Periodic updates
          for i in {1..11}; do
            sleep 1200  # Wait 20 minutes
            remaining_hours=$((4 - i/3))
            remaining_minutes=$((60 - (i*20)%60))
      
            if [ $remaining_minutes -eq 60 ]; then
              time_message="~$remaining_hours hours remaining"
            else
              time_message="~$remaining_hours hours $remaining_minutes remaining"
            fi
      
            update_message=$(create_message "$time_message")
            update_pr_description "$update_message"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Launch another workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'qrcode.yml',
              ref: 'main',
              inputs: {
                pr_number: '${{ env.PR_NUMBER }}'
              }
            })

      - name: Sleep 10 minutes
        run: |
          sleep 600
    
