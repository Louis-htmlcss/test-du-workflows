name: Create QR Code Workflow for PR

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'zulu'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: |
          npm ci
          npm install -g @expo/ngrok@^4.1.0
      - name: Start Expo server
        run: |
          nohup npx expo start --no-dev --clear --tunnel 2>&1 | tee expo.log &
          echo $! > expo.pid
          sleep 20
        env:
          EXPO_DEBUG: true
      - name: Extract and Display Expo URL
        run: |
          expo_url=$(grep -oP '(?<=URL: ).*' expo.log | tail -n 1)
          if [ -z "$expo_url" ]; then
            echo "Failed to extract Expo URL"
            exit 1
          fi
          echo "EXPO_URL=$expo_url" >> $GITHUB_ENV
          echo "Expo URL: ${{ env.EXPO_URL }}"
      - name: Generate QR Code
        run: |
          sudo apt-get update && sudo apt-get install -y qrencode
          qrencode -o "qr_code_pr${{ github.event.pull_request.number }}.png" "${{ env.EXPO_URL }}"
          echo "Expo URL: ${{ env.EXPO_URL }}"
      - name: Upload QR Code as artifact
        uses: actions/upload-artifact@v3
        with:
          name: qr-code
          path: qr_code_pr${{ github.event.pull_request.number }}.png
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Create and Start HTTP Server
        run: |
          cat > server.py << 'EOF'
          import http.server
          import socketserver
          import os

          class CORSRequestHandler(http.server.SimpleHTTPRequestHandler):
              def end_headers(self):
                  self.send_header('Access-Control-Allow-Origin', '*')
                  super().end_headers()

          PORT = 8000
          Handler = CORSRequestHandler
          with socketserver.TCPServer(("", PORT), Handler) as httpd:
              print(f"Serving at port {PORT}")
              httpd.serve_forever()
          EOF
          
          mkdir -p public
          cp qr_code_pr${{ github.event.pull_request.number }}.png public/
          cd public
          nohup python ../server.py > ../server.log 2>&1 &
          echo $! > ../server.pid
          
          # Attendre que le serveur dÃ©marre
          sleep 5
          
          # Utiliser ngrok pour exposer le serveur
          nohup ngrok http 8000 > ../ngrok.log 2>&1 &
          sleep 5
          
          # Extraire l'URL ngrok
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | grep -o '"public_url":"[^"]*' | grep -o 'http[^"]*' | head -1)
          echo "QR_URL=$NGROK_URL/qr_code_pr${{ github.event.pull_request.number }}.png" >> $GITHUB_ENV

      - name: PR comment with QR Code link
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            Voici le QR Code pour tester votre application Expo :
            ![QR Code](${{ env.QR_URL }})
            Et le lien de l'application Expo :
            ${{ env.EXPO_URL }}

      - name: Sleep 1 hour
        run: |
          sleep 3600
      - name: Launch another workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'qrcode.yml',
              ref: 'main',
            })
